library(vrtest)
help(vrtest)
View(pdata)
Auto.VR(pdata)
library(tidyverse)
vars <- pdata %>% select(-ENTRY)
View(vars)
Auto.VR(vars)
Auto.VR(vars$rexIND)
Auto.Boot(vars$rexIND)
AutoBoot.test(vars$rexIND)
AutoBoot.test(vars$rexIND, nboot=100, wild, prob=c(0.025,0.975))
AutoBoot.test(vars$rexIND, nboot=100, wild=normal, prob=c(0.025,0.975))
AutoBoot.test(vars$rexIND, nboot=100, normal, prob=c(0.025,0.975))
AutoBoot.test(vars$rexIND, nboot=100, "normal", prob=c(0.025,0.975))
AutoBoot.test(vars$rexIND, nboot=100, "normal", prob=c(0.025,0.975))
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
cvar_ratio(pdata$rexIND,5)
cvar_ratio(pdata$rexIND,190)
cvar_ratio(pdata$rexLNK,190)
xx <-random(378)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
xx <-random(378)
xx <-random(378)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
xx <-random(378)
XX
xx
cvar_ratio(xx,190)
cvar_ratio(pdata$rexIND,190)
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest <- cvar_ratio(pdata$rexIND,190)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
View(vtest)
#y[k,"error"] <- sqrt(2/(N - k))
y[k,"error"] <- sqrt((0.75*N/k)+1)
cvar_ratio(pdata$rexLNK,190)
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
View(vtest)
AutoBoot.test(vars$rexIND, nboot=100, "normal", prob=c(0.025,0.975))
AutoBoot.test(vars$rexIND, nboot=100, "normal", prob=c(0.025,0.975), na.rm = TRUE)
AutoBoot.test(vars$rexIND, nboot=100, "normal", prob=c(0.025,0.975))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Loading packages used
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("plm")) install.packages("plm")
library(tidyverse)
Example_data <- Texevier::Ex_Dat
# Notice that as you are working in a .Rproj file (I am assuming you are) - the relative paths of your directories start at your specified root.
# This means that when working in a .Rproj file, you never need to use getwd() - it is assumed as your base root automatically.
write_rds(Example_data, path = "data/Example_data.rds")
e <- plot_rex(pdata$ENTRY,pdata$rexMNR)
View(e)
library(tidyverse)
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Loading packages used
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("plm")) install.packages("plm")
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
Example_data <- Texevier::Ex_Dat
# Notice that as you are working in a .Rproj file (I am assuming you are) - the relative paths of your directories start at your specified root.
# This means that when working in a .Rproj file, you never need to use getwd() - it is assumed as your base root automatically.
write_rds(Example_data, path = "data/Example_data.rds")
rex()
list.files('metrics/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
rex()
list.files('metrics/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
rex()
rex()
library(tidyverse)
list.files('metrics/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
rex()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Loading packages used
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("plm")) install.packages("plm")
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
Example_data <- Texevier::Ex_Dat
ind <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/ind.dat")
lnk <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/lnk.dat")
mal <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/mal.dat")
mnr <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/mnr.dat")
pak <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/pak.dat")
phl <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/phl.dat")
thi <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/thi.dat")
# adding in a column to each data set for the real exchange rate
rexIND <- ind %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexIND = real_exchange(INDEX, INDCPI, USCPI)) %>% select(ENTRY, rexIND)
rexLNK <- lnk %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexLNK = real_exchange(LNKEX, LNKCPI, USCPI)) %>% select(rexLNK)
rexMAL <- mal %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexMAL = real_exchange(MALEX, MALCPI, USCPI)) %>% select(rexMAL)
rexMNR <- mnr %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(MNREX = replace(MNREX, 203, 16.5)) %>% mutate(rexMNR = real_exchange(MNREX, MNRCPI, USCPI)) %>% select(rexMNR) #replaced the value for the exchange rate for 1974:11 with 16.5 (was 1.45)
rexPAK <- pak %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexPAK = real_exchange(PAKEX, PAKCPI, USCPI)) %>% select(rexPAK)
rexPHL <- phl %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(PHLEX = replace(PHLEX, 213, 7.7)) %>% mutate(rexPHL = real_exchange(PHLEX, PHLCPI, USCPI)) %>% select(rexPHL) #replaced the value for the exchange rate for 1975:09 with 7.7 (was 0.7)
rexTHI <- thi %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexTHI = real_exchange(THIEX, THICPI, USCPI)) %>% select(rexTHI)
# binding the columns together for a panel data setof real exchange rates
pdata <- bind_cols(rexIND,rexLNK, rexMAL, rexMNR,  rexPAK,  rexPHL,  rexTHI)
# Notice that as you are working in a .Rproj file (I am assuming you are) - the relative paths of your directories start at your specified root.
# This means that when working in a .Rproj file, you never need to use getwd() - it is assumed as your base root automatically.
write_rds(Example_data, path = "data/Example_data.rds")
mlk1 <- plot_rex(pdata$ENTRY,pdata$rexMLK)
mal1 <- plot_rex(pdata$ENTRY,pdata$rexMAL)
mal1
mnr1 <- plot_rex(pdata$ENTRY,pdata$rexMNR)
mal1 <- plot_rex(pdata$ENTRY,pdata$rexMAL)
mal1
mnr1 <- plot_rex(pdata$ENTRY,pdata$rexMNR)
mnr1 <- plot_rex(pdata$ENTRY,pdata$rexMNR)
mnr1
mlk1 <- plot_rex(pdata$ENTRY,pdata$rexMLK)
mlk1
mal1
mal1 <- plot_rex(pdata$ENTRY,pdata$rexMAL)
mal1
View(pdata)
ind1 <- plot_rex(pdata$ENTRY,pdata$rexIND)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Loading packages used
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("plm")) install.packages("plm")
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
Example_data <- Texevier::Ex_Dat
ind <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/ind.dat")
lnk <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/lnk.dat")
mal <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/mal.dat")
mnr <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/mnr.dat")
pak <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/pak.dat")
phl <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/phl.dat")
thi <- read_table("C:/Users/Cassandra/OneDrive/Documents/2021 Academics/Metrics/Time Series Project/R stuffs/Write_Up/data/files/thi.dat")
# adding in a column to each data set for the real exchange rate
rexIND <- ind %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexIND = real_exchange(INDEX, INDCPI, USCPI)) %>% select(ENTRY, rexIND)
rexLNK <- lnk %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexLNK = real_exchange(LNKEX, LNKCPI, USCPI)) %>% select(rexLNK)
rexMAL <- mal %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexMAL = real_exchange(MALEX, MALCPI, USCPI)) %>% select(rexMAL)
rexMNR <- mnr %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(MNREX = replace(MNREX, 203, 16.5)) %>% mutate(rexMNR = real_exchange(MNREX, MNRCPI, USCPI)) %>% select(rexMNR) #replaced the value for the exchange rate for 1974:11 with 16.5 (was 1.45)
rexPAK <- pak %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexPAK = real_exchange(PAKEX, PAKCPI, USCPI)) %>% select(rexPAK)
rexPHL <- phl %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(PHLEX = replace(PHLEX, 213, 7.7)) %>% mutate(rexPHL = real_exchange(PHLEX, PHLCPI, USCPI)) %>% select(rexPHL) #replaced the value for the exchange rate for 1975:09 with 7.7 (was 0.7)
rexTHI <- thi %>% mutate(ENTRY = as.factor(ENTRY)) %>% mutate(rexTHI = real_exchange(THIEX, THICPI, USCPI)) %>% select(rexTHI)
# binding the columns together for a panel data setof real exchange rates
pdata <- bind_cols(rexIND,rexLNK, rexMAL, rexMNR,  rexPAK,  rexPHL,  rexTHI)
# Notice that as you are working in a .Rproj file (I am assuming you are) - the relative paths of your directories start at your specified root.
# This means that when working in a .Rproj file, you never need to use getwd() - it is assumed as your base root automatically.
write_rds(Example_data, path = "data/Example_data.rds")
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
# Set WD below to your project's working directory.
library(tidyverse)
g <- rex_plots_combined(pdata)
g
g <- rex_plots_combined(pdata)
g <- rex_plots_combined(pdata)
g
g <- rex_plots_combined(pdata)
g <- rex_plots_combined(pdata)
g
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
h <- rex_plots_combined1(pdata)
h
library(tidyverse)
rand_test <- function(x, alternative="two.sided", threshold=median(x), pvalue="normal", plot=FALSE){
# Performs the Runs Test for Randomness.
#
# Args:
#   x: a numeric vector containing the data.
#   alternative hypothesis, must be one of "two.sided" (default), "left.sided" or "right.sided"
#   threshold:
#
# Returns:
#   statistic: the (normalized) value of the statistic test.
#   n: the sample size, after the remotion of consecutive duplicate values.
#   p.value: the asymptotic p-value.
#
dname <- deparse(substitute(x))
if (alternative == "t"){alternative <- "two.sided"}
if (alternative == "l"){alternative <- "left.sided"}
if (alternative == "r"){alternative <- "right.sided"}
if (alternative != "two.sided" & alternative != "left.sided" & alternative != "right.sided")
{stop("must give a valid alternative")}
# Remove NAs
x <- na.omit(x)
stopifnot(is.numeric(x))
# Remove values equal to the level
x <- x[x!=threshold]
s <- sign(x-threshold)
n1 <- 183
n2 <- 195
runs <- rle(s)
r1 <- length(runs$lengths[runs$values==1])
r2 <- length(runs$lengths[runs$values==-1])
n <- n1+n2
mu <- 1 + 2*n1*n2/(n1+n2)
vr <- 2*n1*n2*(2*n1*n2-n1-n2)/(n^2*(n-1))
rr <- r1+r2
#
# Plot the data if requested by the user
if (plot){
plot((1:n)[s>0],x[s>0], xlim=c(1,n), ylim=c(min(x),max(x)), xlab="", ylab=dname)
points((1:n)[s<0],x[s<0], col="red")
abline(h=threshold, col=gray(.4))
for (i in 1:(n-1)){
if (s[i]*s[i+1]<0){abline(v=i+0.5, lty=2)}
}
}
#
# Computes the p-value
pv <- 0
if (pvalue == "exact"){
if (alternative=="two.sided"){
pv1<-sum(druns(1:rr,n1,n2))
pv2<-sum(druns(rr:(n1+n2),n1,n2))
pv <- 2*min(pv1,pv2)
}
if (alternative=="left.sided"){pv<-sum(druns(2:rr,n1,n2))}
if (alternative=="right.sided") {pv<-sum(druns(rr:(n1+n2),n1,n2))}
}
if (pvalue=="normal"){
pv0 <- pnorm((rr - mu) / sqrt(vr))
if (alternative=="two.sided"){pv <- 2*min(pv0,1-pv0)}
if (alternative=="left.sided"){pv <- pv0}
if (alternative=="right.sided") {pv <- 1-pv0}
}
if (alternative=="two.sided"){alternative<-"nonrandomness"}
if (alternative=="left.sided"){alternative<-"trend"}
if (alternative=="right.sided") {alternative<-"first-order negative autocorrelation"}
#
rval <- list(statistic = c(statistic=(rr - mu) / sqrt(vr)), p.value = pv, runs=rr, mu=mu, var=vr,
method = "Runs Test", data.name = dname, parameter=c(runs=rr, n1=n1,n2=n2,n=n), alternative=alternative)
class(rval) <- "htest"
return(rval)
}
Wind <- rand_test(pdata$rexIND)
Wlnk <- rand_test(pdata$rexLNK)
Wmal <- rand_test(pdata$rexMAL)
Wmnr <-rand_test(pdata$rexMNR)
Wpak <- rand_test(pdata$rexPAK)
Wphl <- rand_test(pdata$rexPHL)
Wthi <- rand_test(pdata$rexTHI)
WaldTest <- bind_rows(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
View(Wind)
Wind <- rand_test(pdata$rexIND) %>% data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- rand_test(pdata$rexIND) %>% data.frame(matrix(unlist(), nrow=length(), byrow=TRUE))
View(Wlnk)
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- rand_test(pdata$rexIND)
Wlnk <- rand_test(pdata$rexLNK) %>% data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind1 <- data.frame(matrix(unlist(Wind), nrow=length(Wind), byrow=TRUE))
Wind1 <- data.frame(matrix(unlist(Wind), ncol=length(Wind), bycol=TRUE))
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- rand_test(pdata$rexIND) %>% data.frame()
library(tidystats)
install.packages(tidystats)
install.packages("tidystats")
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats.htest(rand_test(pdata$rexIND))
library(tidystats)
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats.htest(rand_test(pdata$rexIND))
library(tidystats)
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats.htest(rand_test(pdata$rexIND))
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats(rand_test(pdata$rexIND))
View(Wind)
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats(rand_test(pdata$rexIND))
#Wind1 <- data.frame(matrix(unlist(Wind), ncol=length(Wind), bycol=TRUE))
Wlnk <- tidy_stats(rand_test(pdata$rexLNK))
Wmnr <- tidy_stats(rand_test(pdata$rexMNR))
Wpak <- tidy_stats(rand_test(pdata$rexPAK))
Wphl <- tidy_stats(rand_test(pdata$rexPHL))
Wthi <- tidy_stats(rand_test(pdata$rexTHI))
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats(rand_test(pdata$rexIND))
WaldTest <- bind_rows(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats(rand_test(pdata$rexIND)) %>% data.frame()
View(Wind)
Wind
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats(rand_test(pdata$rexIND)) %>% data.frame() %>% rename( statistics.statistic.value = Statistic)
# example of list to dataframe df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
Wind <- tidy_stats(rand_test(pdata$rexIND)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value)
View(Wind)
Wind <- tidy_stats(rand_test(pdata$rexIND)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value) %>% select(Statistic)
#Wind1 <- data.frame(matrix(unlist(Wind), ncol=length(Wind), bycol=TRUE))
Wlnk <- tidy_stats(rand_test(pdata$rexLNK)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value) %>% select(Statistic)
Wmal <- tidy_stats(rand_test(pdata$rexMAL)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value) %>% select(Statistic)
Wmnr <- tidy_stats(rand_test(pdata$rexMNR)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value) %>% select(Statistic)
Wpak <- tidy_stats(rand_test(pdata$rexPAK)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value) %>% select(Statistic)
Wphl <- tidy_stats(rand_test(pdata$rexPHL)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value) %>% select(Statistic)
Wthi <- tidy_stat
WaldTest <- bind_rows(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
View(WaldTest)
Wthi <- tidy_stats(rand_test(pdata$rexTHI)) %>% data.frame() %>% rename(Statistic = statistics.statistic.value) %>% select(Statistic)
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
View(WaldTest)
Wlnk <- tidy_stats(rand_test(pdata$rexLNK)) %>% data.frame() %>% rename(SriLanka = statistics.statistic.value) %>% select(SriLanka)
Wmal <- tidy_stats(rand_test(pdata$rexMAL)) %>% data.frame() %>% rename(Malasia = statistics.statistic.value) %>% select(Malasia)
Wmnr <- tidy_stats(rand_test(pdata$rexMNR)) %>% data.frame() %>% rename(Myanmar = statistics.statistic.value) %>% select(Myanmar)
Wpak <- tidy_stats(rand_test(pdata$rexPAK)) %>% data.frame() %>% rename(Pakistan = statistics.statistic.value) %>% select(Pakistan)
Wphl <- tidy_stats(rand_test(pdata$rexPHL)) %>% data.frame() %>% rename(Philippines = statistics.statistic.value) %>% select(Philippines)
Wthi <- tidy_stats(rand_test(pdata$rexTHI)) %>% data.frame() %>% rename(Thailand = statistics.statistic.value) %>% select(Thailand)
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
View(WaldTest)
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi) %>% mutate(Test/Country = "Wald-Wolfowitz")
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi) %>% mutate(Test/Country == "Wald-Wolfowitz")
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi) %>% mutate(Test/Country = 1)
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi) %>% mutate(., Test Country = Wald-Wolfowitz")
Waldtest
}
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi) %>% mutate(., Test Country = "Wald-Wolfowitz")
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
Waldtest$Test/Currency <- c("Wald-Wolfowitz")
WaldTest$Test/Currency <- c("Wald-Wolfowitz")
WaldTest$Test <- c("Wald-Wolfowitz")
Waldtest
view(WaldTest)
Test//Currency <- c("Wald-Wolfowitz")
Test <- c("Wald-Wolfowitz")
WaldTest <- bind_cols(Test, Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
WaldTest <- bind_cols(Test, Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
View(WaldTest)
Test <- c("Wald-Wolfowitz")
view(Test)
Test <- c("Wald-Wolfowitz") %>% rename("Tess/Currency"= x)
Test <- c("Wald-Wolfowitz") %>% rename("Tess/Currency")
Test$Test <- c("Wald-Wolfowitz") %>% rename("Tess/Currency")
Test$Test <- c("Wald-Wolfowitz") %>% rename("Tess/Currency" = Test)
Test$Test <- c("Wald-Wolfowitz")
Test <- c("Wald-Wolfowitz") %>% data.frame() %>% rename("Tess/Currency" = x)
Test <- c("Wald-Wolfowitz") %>% data.frame()
View(Test)
Test <- c("Wald-Wolfowitz") %>% data.frame()  %>% rename("Tess/Currency" = .)
Test <- c("Wald-Wolfowitz") %>% data.frame(., colnames("Test/Currency"))
Test <- c("Wald-Wolfowitz") %>% data.frame(., col.names = ("Test/Currency"))
view(Test)
Test <- c("Wald-Wolfowitz") %>% data.frame(., row.names = ("Test/Currency"))
view(Test)
WaldTest <- bind_cols(Test, Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
View(WaldTest)
Test <- c("Wald-Wolfowitz")
view(Test)
WaldTest <- bind_cols(Test, Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
WaldTest$Test <- c("Wald-Wolfowitz")
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
view(WaldTest)
WaldTest$Test <- c("Wald-Wolfowitz")
WaldTest <- bind_cols(Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
view(WaldTest)
Test <- c("Wald-Wolfowitz")
WaldTest <- bind_cols(Test, Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
Test$test <- c("Wald-Wolfowitz")
Test <- data.frame(c("Wald-Wolfowitz"))
view(Test)
Test <- data.frame(c("Wald-Wolfowitz")) %>% rename(Test/Currency = c..Wald.Wolfowitz..)
Test <- data.frame(c("Wald-Wolfowitz")) %>% rename("Test/Currency" = c..Wald.Wolfowitz..)
view(Test)
WaldTest <- bind_cols(Test, Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
view(WaldTest)
library(randtests)
View(WaldTest)
Wind <- tidy_stats(rand_test(pdata$rexIND)) %>% data.frame() %>% rename(India = statistics.statistic.value) %>% select(India)
Wlnk <- tidy_stats(rand_test(pdata$rexLNK)) %>% data.frame() %>% rename(SriLanka = statistics.statistic.value) %>% select(SriLanka)
Wmal <- tidy_stats(rand_test(pdata$rexMAL)) %>% data.frame() %>% rename(Malasia = statistics.statistic.value) %>% select(Malasia)
Wmnr <- tidy_stats(rand_test(pdata$rexMNR)) %>% data.frame() %>% rename(Myanmar = statistics.statistic.value) %>% select(Myanmar)
Wpak <- tidy_stats(rand_test(pdata$rexPAK)) %>% data.frame() %>% rename(Pakistan = statistics.statistic.value) %>% select(Pakistan)
Wphl <- tidy_stats(rand_test(pdata$rexPHL)) %>% data.frame() %>% rename(Philippines = statistics.statistic.value) %>% select(Philippines)
Wthi <- tidy_stats(rand_test(pdata$rexTHI)) %>% data.frame() %>% rename(Thailand = statistics.statistic.value) %>% select(Thailand)
Test <- data.frame(c("Wald-Wolfowitz")) %>% rename("Test/Currency" = c..Wald.Wolfowitz..)
WaldTest <- bind_cols(Test, Wind, Wlnk,  Wmal, Wmnr, Wpak, Wphl,  Wthi)
View(WaldTest)
h <- xtable(wald(pdata))
h
h <- xtable(wald(pdata))
# The Wald-Wolfowitz tests
library(xtable)
h <- xtable(wald(pdata))
# The Wald-Wolfowitz tests
library(kable)
h <- knitr::kable(wald(pdata))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
A <- ADF(pdata)
A <- kable(ADF(pdata))
A <- knitr::kable(ADF(pdata))
A
library(devtools)
library(devtools)
library(tidyverse)
devtools::install_github("haozhu233/kableExtra")
library(tidyverse)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio(pdata$rexIND,190)
vtest
source('~/.active-rstudio-document', encoding = 'UTF-8')
cvar_ratio1(pdata$rexLNK,190)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
cvar_ratio1(pdata$rexLNK,190)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
cvar_ratio1(pdata$rexLNK,190)
cvar_ratio1(pdata$rexLNK,190)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
#
library(tidyverse)
new <- y %>% mutate(er = vr/(sqrt((0.75*N/k)+1))
return(new)
}
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
cvar_ratio1(pdata$rexLNK,190)
#
library(tidyverse)
new <- data.frame(y) %>% mutate(er = vr/(sqrt((0.75*N/k)+1)))
cvar_ratio1(pdata$rexLNK,190)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
cvar_ratio1(pdata$rexLNK,190)
cvar_ratio1(pdata$rexIND,190)
vtest <- cvar_ratio1(pdata$rexIND,190)
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
vtest <- cvar_ratio1(pdata$rexIND,190)
View(vtest)
vtest <- cvar_ratio(pdata$rexIND,190)
View(vtest)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
a <- cvar_table(pdata)
vIND <- data.frame(cvar_ratio(pdata$rexIND,190))
View(vIND)
vLNK <- data.frame(cvar_ratio(pdata$rexLNK,190))
vMAL <- data.frame(cvar_ratio(pdata$rexMAL,190))
vMNR <- data.frame(cvar_ratio(pdata$rexMNR,190))
vPAK <- data.frame(cvar_ratio(pdata$rexPAK,190))
vPHL <- data.frame(cvar_ratio(pdata$rexPHL,190))
names <- data.frame("Countries (Currency)" = c("India Rupee", "Sri Lanka Rupee", "Malaysia Ringgit", "Myanmar Kyat", "Pakistan Rupee", "Phillipines Peso", "Thailand Baht"))
VR <- bind_rows(vInd$vr, vInd$error, vLNK$vr, vLNK$error, vMAL$vr, vMAL$error,
vMNR$vr, vMNR$error, vPAK$vr, vPAK$error, vPHL$vr, vPHL$error, vTHI$vr, vTHI$error)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
a <- cvar_table(pdata)
VR <- bind_rows(vIND$vr, vIND$error, vLNK$vr, vLNK$error, vMAL$vr, vMAL$error,
vMNR$vr, vMNR$error, vPAK$vr, vPAK$error, vPHL$vr, vPHL$error, vTHI$vr, vTHI$error)
vIND <- data.frame(cvar_ratio(pdata$rexIND,190))
vLNK <- data.frame(cvar_ratio(pdata$rexLNK,190))
vMAL <- data.frame(cvar_ratio(pdata$rexMAL,190))
vMNR <- data.frame(cvar_ratio(pdata$rexMNR,190))
vPAK <- data.frame(cvar_ratio(pdata$rexPAK,190))
vPHL <- data.frame(cvar_ratio(pdata$rexPHL,190))
vTHI <- data.frame(cvar_ratio(pdata$rexTHI,190))
names <- data.frame("Countries (Currency)" = c("India Rupee", "Sri Lanka Rupee", "Malaysia Ringgit", "Myanmar Kyat", "Pakistan Rupee", "Phillipines Peso", "Thailand Baht"))
VR <- bind_rows(vIND$vr, vIND$error, vLNK$vr, vLNK$error, vMAL$vr, vMAL$error,
vMNR$vr, vMNR$error, vPAK$vr, vPAK$error, vPHL$vr, vPHL$error, vTHI$vr, vTHI$error)
FullVR <- bind_cols(names, VR)
FullVR
VR <- bind_rows(vIND$vr, vIND$error, vLNK$vr, vLNK$error, vMAL$vr, vMAL$error,
vMNR$vr, vMNR$error, vPAK$vr, vPAK$error, vPHL$vr, vPHL$error, vTHI$vr, vTHI$error)
VR <- bind_rows(vIND, vIND, vLNK, vMAL, vMNR, vPAK, vPHL, vTHI)
FullVR <- bind_cols(names, VR)
View(VR)
VR <- bind_cols(vIND, vIND, vLNK, vMAL, vMNR, vPAK, vPHL, vTHI)
FullVR <- bind_cols(names, VR)
View(VR)
